{"version":3,"sources":["constants/action.types.ts","components/photoCard/PhotoCard.tsx","components/carousel/Carousel.tsx","containers/Carousel.tsx","actions/photos/photos.action.ts","components/pageHeading/PageHeading.tsx","App.tsx","reducers/photos/photos.reducer.ts","reducers/index.ts","constants/endpoint.ts","sagas/photos.sagas.ts","sagas/index.ts","store/index.ts","index.tsx"],"names":["actions","GET","SUCCESS","FAILURE","PhotoCard","previewURL","user","className","src","alt","CarouselComponent","photos","useState","current","setCurrent","visibleItems","setVisibleItems","setVisibleItemOnScreen","item","window","innerWidth","useEffect","addEventListener","removeEventListener","slicePhotos","slice","carouselItems","length","data-testid","map","photo","index","key","type","onClick","aria-label","resetIndex","connect","state","dispatch","getPhotos","status","color","height","width","timeout","PageHeading","title","App","initialState","rootReducers","combineReducers","action","payload","error","params","q","image_type","getPhotosSaga","photosSagas","axios","get","call","response","put","data","hits","takeEvery","rootSaga","root","all","fork","sagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.45133f04.chunk.js","sourcesContent":["export const actions = {\n  PHOTOS: {\n    GET: 'PHOTOS_GET',\n    SUCCESS: 'PHOTOS_SUCCESS',\n    FAILURE: 'PHOTOS_FAILURE',\n  },\n};\n","import React from 'react';\nimport { Photo } from '../../types/Photo';\nimport './PhotoCard.scss';\n\nconst PhotoCard: React.FC<Photo> = ({ previewURL, user }) => {\n  return (\n    <li className=\"carousel-item\">\n      <img className=\"carousel-image\" src={previewURL} alt={user} />\n      <p className=\"user-name\">{user}</p>\n    </li>\n  );\n};\n\nexport default PhotoCard;\n","import React, { useEffect, useState } from 'react';\nimport PhotoCard from '../photoCard/PhotoCard';\nimport './Carousel.scss';\nimport { Photo } from '../../types/Photo';\n\ninterface Props {\n  photos: Array<Photo>;\n}\n\nconst CarouselComponent: React.FC<Props> = ({ photos = [] }) => {\n  const [current, setCurrent] = useState(0);\n  const [visibleItems, setVisibleItems] = useState(1);\n\n  const setVisibleItemOnScreen = () => {\n    let item = 1;\n    if (window.innerWidth >= 1024) {\n      item = 5;\n    } else if (window.innerWidth >= 768) {\n      item = 3;\n    }\n\n    setVisibleItems(item);\n  };\n\n  useEffect(() => {\n    setVisibleItemOnScreen();\n    window.addEventListener('resize', setVisibleItemOnScreen);\n    return () => {\n      window.removeEventListener('resize', setVisibleItemOnScreen);\n    };\n  }, []);\n\n  const onPrevClick = () => {\n    const resetToVeryBack = current === 0;\n    const index = resetToVeryBack ? photos.length - 1 : current - 1;\n    setCurrent(index);\n  };\n\n  const onNextClick = () => {\n    const resetIndex = current === photos.length - 1;\n\n    const index = resetIndex ? 0 : current + 1;\n    setCurrent(index);\n  };\n\n  const slicePhotos = photos.slice(current, current + visibleItems);\n\n  const carouselItems =\n    slicePhotos.length < visibleItems\n      ? [...slicePhotos, ...photos.slice(0, visibleItems - slicePhotos.length)]\n      : slicePhotos;\n\n  return (\n    <div className=\"carousel-wrapper\">\n      <ul className=\"carousel-items\" data-testid=\"carousel-items\">\n        {carouselItems.map((photo, index) => (\n          <PhotoCard key={index} {...photo} />\n        ))}\n      </ul>\n      <button\n        data-testid=\"prev-btn\"\n        type=\"button\"\n        onClick={onPrevClick}\n        aria-label=\"previous\"\n        className=\"carousel-button prev\"\n      >\n        prev\n      </button>\n      <button\n        data-testid=\"next-btn\"\n        type=\"button\"\n        onClick={onNextClick}\n        aria-label=\"next\"\n        className=\"carousel-button next\"\n      >\n        next\n      </button>\n    </div>\n  );\n};\n\nexport default CarouselComponent;\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport Loader from 'react-loader-spinner';\nimport { State } from '../reducers';\nimport { getPhotos } from '../actions/photos/photos.action';\nimport CarouselComponent from '../components/carousel/Carousel';\nimport { Photo } from '../types/Photo';\n\ninterface Props {\n  status: string;\n  photos?: Array<Photo>;\n  getPhotos: any;\n}\n\nconst CarouselContainer: React.FC<Props> = ({\n  photos = [],\n  status,\n  getPhotos,\n}) => {\n  useEffect(() => {\n    getPhotos();\n  }, [getPhotos]);\n\n  return (\n    <div className=\"container\">\n      {status === 'loading' ? (\n        <Loader\n          type=\"Grid\"\n          color=\"#00BFFF\"\n          height={100}\n          width={100}\n          timeout={3000}\n        />\n      ) : (\n        status === 'loaded' && <CarouselComponent photos={photos} />\n      )}\n      {status === 'error' && (\n        <div className=\"error-content\">\n          Oops there is an error! Try Again later\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: State) => ({ ...state.photos });\n\nconst mapDispatchToProps = (dispatch: any) => ({\n  getPhotos: () => dispatch(getPhotos()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CarouselContainer);\n","import { actions } from '../../constants/action.types';\nimport { BaseAction, Photo } from '../../types/Photo';\n\nexport const getPhotos = (): BaseAction => ({\n  type: actions.PHOTOS.GET,\n});\n\nexport const getPhotosSuccess = (photos: Array<Photo>): BaseAction => ({\n  type: actions.PHOTOS.SUCCESS,\n  payload: photos,\n});\n\nexport const getPhotosFailure = (error: object): BaseAction => ({\n  type: actions.PHOTOS.FAILURE,\n  payload: error,\n});\n","import React from 'react';\nimport './PageHeading.scss';\n\ninterface Props {\n  title: string;\n}\n\nconst PageHeading: React.FC<Props> = ({ title }) => {\n  return <h1 className=\"page-headline\">{title}</h1>;\n};\nexport default PageHeading;\n","import React, { Fragment } from 'react';\nimport './_shared/styles/main.scss';\nimport CarouselContainer from './containers/Carousel';\nimport PageHeading from './components/pageHeading/PageHeading';\n\nconst App: React.FC = () => {\n  return (\n    <Fragment>\n      <PageHeading title=\"Carousel Test\" />\n      <CarouselContainer />\n    </Fragment>\n  );\n};\n\nexport default App;\n","import { actions } from '../../constants/action.types';\nimport { Carousel, Photo, BaseAction } from '../../types/Photo';\n\nexport const initialState = {\n  status: 'init',\n};\nexport const photosReducer = (\n  state: Carousel<Photo> = initialState,\n  action: BaseAction\n) => {\n  switch (action.type) {\n    case actions.PHOTOS.GET:\n      return { ...state, status: 'loading' };\n    case actions.PHOTOS.SUCCESS:\n      return {\n        ...state,\n        photos: action.payload,\n        status: 'loaded',\n      };\n    case actions.PHOTOS.FAILURE:\n      return { ...state, error: action.payload, status: 'error' };\n  }\n  return state;\n};\n","import { combineReducers } from 'redux';\nimport { Carousel, Photo } from '../types/Photo';\nimport { photosReducer } from './photos/photos.reducer';\n\nexport interface State {\n  photos: Carousel<Photo>;\n}\n\nexport const rootReducers = combineReducers<State>({\n  photos: photosReducer,\n});\n","const API_KEY = '9656065-a4094594c34f9ac14c7fc4c39';\nexport const API_ROOT = 'https://pixabay.com/api/';\nexport const params = {\n  key: API_KEY,\n  q: 'beautiful landscape',\n  image_type: 'photo',\n};\n","import axios from 'axios';\nimport { call, put, takeEvery } from 'redux-saga/effects';\nimport {\n  getPhotosSuccess,\n  getPhotosFailure,\n} from '../actions/photos/photos.action';\nimport { API_ROOT, params } from '../constants/endpoint';\nimport { actions } from '../constants/action.types';\n\nfunction getPhotos() {\n  return axios.get(API_ROOT, { params });\n}\n\nfunction* getPhotosSaga() {\n  try {\n    const response = yield call(getPhotos);\n    yield put(getPhotosSuccess(response.data.hits));\n  } catch (error) {\n    yield put(getPhotosFailure(error));\n  }\n}\n\nexport default function* photosSagas() {\n  yield takeEvery(actions.PHOTOS.GET, getPhotosSaga);\n}\n","import { all, fork } from 'redux-saga/effects';\nimport photosSagas from './photos.sagas';\n\nexport const rootSaga = function* root() {\n  yield all([fork(photosSagas)]);\n};\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport createSagaMiddleware from 'redux-saga';\nimport { rootReducers } from '../reducers';\nimport { rootSaga } from '../sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nexport const store = createStore(\n  rootReducers,\n  {},\n  composeWithDevTools(applyMiddleware(sagaMiddleware))\n);\n\nsagaMiddleware.run(rootSaga);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport { store } from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}